// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/superkomputer/apiclient/models"
)

// UpdateUserReader is a Reader for the UpdateUser structure.
type UpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewUpdateUserAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 304:
		result := NewUpdateUserNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateUserAccepted creates a UpdateUserAccepted with default headers values
func NewUpdateUserAccepted() *UpdateUserAccepted {
	return &UpdateUserAccepted{}
}

/*UpdateUserAccepted handles this case with default header values.

update user task has been accepted
*/
type UpdateUserAccepted struct {
}

func (o *UpdateUserAccepted) Error() string {
	return fmt.Sprintf("[PUT /users/{username}][%d] updateUserAccepted ", 202)
}

func (o *UpdateUserAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserNotModified creates a UpdateUserNotModified with default headers values
func NewUpdateUserNotModified() *UpdateUserNotModified {
	return &UpdateUserNotModified{}
}

/*UpdateUserNotModified handles this case with default header values.

no update required
*/
type UpdateUserNotModified struct {
}

func (o *UpdateUserNotModified) Error() string {
	return fmt.Sprintf("[PUT /users/{username}][%d] updateUserNotModified ", 304)
}

func (o *UpdateUserNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserNotFound creates a UpdateUserNotFound with default headers values
func NewUpdateUserNotFound() *UpdateUserNotFound {
	return &UpdateUserNotFound{}
}

/*UpdateUserNotFound handles this case with default header values.

The user was not found
*/
type UpdateUserNotFound struct {
	Payload *models.Error
}

func (o *UpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{username}][%d] updateUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserDefault creates a UpdateUserDefault with default headers values
func NewUpdateUserDefault(code int) *UpdateUserDefault {
	return &UpdateUserDefault{
		_statusCode: code,
	}
}

/*UpdateUserDefault handles this case with default header values.

Error
*/
type UpdateUserDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update user default response
func (o *UpdateUserDefault) Code() int {
	return o._statusCode
}

func (o *UpdateUserDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{username}][%d] updateUser default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
